[1mdiff --git a/.gitignore b/.gitignore[m
[1mnew file mode 100644[m
[1mindex 0000000..4a0b530[m
[1m--- /dev/null[m
[1m+++ b/.gitignore[m
[36m@@ -0,0 +1,74 @@[m
[32m+[m[32m# This file is used to ignore files which are generated[m
[32m+[m[32m# ----------------------------------------------------------------------------[m
[32m+[m
[32m+[m[32m*~[m
[32m+[m[32m*.autosave[m
[32m+[m[32m*.a[m
[32m+[m[32m*.core[m
[32m+[m[32m*.moc[m
[32m+[m[32m*.o[m
[32m+[m[32m*.obj[m
[32m+[m[32m*.orig[m
[32m+[m[32m*.rej[m
[32m+[m[32m*.so[m
[32m+[m[32m*.so.*[m
[32m+[m[32m*_pch.h.cpp[m
[32m+[m[32m*_resource.rc[m
[32m+[m[32m*.qm[m
[32m+[m[32m.#*[m
[32m+[m[32m*.*#[m
[32m+[m[32mcore[m
[32m+[m[32m!core/[m
[32m+[m[32mtags[m
[32m+[m[32m.DS_Store[m
[32m+[m[32m.directory[m
[32m+[m[32m*.debug[m
[32m+[m[32mMakefile*[m
[32m+[m[32m*.prl[m
[32m+[m[32m*.app[m
[32m+[m[32mmoc_*.cpp[m
[32m+[m[32mui_*.h[m
[32m+[m[32mqrc_*.cpp[m
[32m+[m[32mThumbs.db[m
[32m+[m[32m*.res[m
[32m+[m[32m*.rc[m
[32m+[m[32m/.qmake.cache[m
[32m+[m[32m/.qmake.stash[m
[32m+[m
[32m+[m[32m# qtcreator generated files[m
[32m+[m[32m*.pro.user*[m
[32m+[m[32mCMakeLists.txt.user*[m
[32m+[m
[32m+[m[32m# xemacs temporary files[m
[32m+[m[32m*.flc[m
[32m+[m
[32m+[m[32m# Vim temporary files[m
[32m+[m[32m.*.swp[m
[32m+[m
[32m+[m[32m# Visual Studio generated files[m
[32m+[m[32m*.ib_pdb_index[m
[32m+[m[32m*.idb[m
[32m+[m[32m*.ilk[m
[32m+[m[32m*.pdb[m
[32m+[m[32m*.sln[m
[32m+[m[32m*.suo[m
[32m+[m[32m*.vcproj[m
[32m+[m[32m*vcproj.*.*.user[m
[32m+[m[32m*.ncb[m
[32m+[m[32m*.sdf[m
[32m+[m[32m*.opensdf[m
[32m+[m[32m*.vcxproj[m
[32m+[m[32m*vcxproj.*[m
[32m+[m
[32m+[m[32m# MinGW generated files[m
[32m+[m[32m*.Debug[m
[32m+[m[32m*.Release[m
[32m+[m
[32m+[m[32m# Python byte code[m
[32m+[m[32m*.pyc[m
[32m+[m
[32m+[m[32m# Binaries[m
[32m+[m[32m# --------[m
[32m+[m[32m*.dll[m
[32m+[m[32m*.exe[m
[32m+[m
[1mdiff --git a/CMakeLists.txt b/CMakeLists.txt[m
[1mnew file mode 100644[m
[1mindex 0000000..f8025bd[m
[1m--- /dev/null[m
[1m+++ b/CMakeLists.txt[m
[36m@@ -0,0 +1,92 @@[m
[32m+[m[32mcmake_minimum_required(VERSION 3.5)[m
[32m+[m
[32m+[m[32mproject(QtMem0ry VERSION 0.1 LANGUAGES CXX)[m
[32m+[m
[32m+[m[32mset(CMAKE_AUTOUIC ON)[m
[32m+[m[32mset(CMAKE_AUTOMOC ON)[m
[32m+[m[32mset(CMAKE_AUTORCC ON)[m
[32m+[m
[32m+[m[32mset(CMAKE_CXX_STANDARD 17)[m
[32m+[m[32mset(CMAKE_CXX_STANDARD_REQUIRED ON)[m
[32m+[m[32mset(CMAKE_INCLUDE_CURRENT_DIR ON)[m
[32m+[m
[32m+[m[32m#set(CMAKE_BUILD_TYPE Debug)[m
[32m+[m[32m#set(CMAKE_CXX_FLAGS_DEBUG "-O0")[m
[32m+[m[32m#set(CMAKE_C_FLAGS_DEBUG "-O0")[m
[32m+[m
[32m+[m
[32m+[m[32mset(CMAKE_CXX_FLAGS "-O0")[m
[32m+[m[32mset(CMAKE_C_FLAGS "-O0")[m
[32m+[m
[32m+[m
[32m+[m[32mfind_package(QT NAMES Qt6 Qt5 REQUIRED COMPONENTS Widgets)[m
[32m+[m[32mfind_package(Qt${QT_VERSION_MAJOR} REQUIRED COMPONENTS Widgets Network)[m
[32m+[m[32mfind_package(CURL REQUIRED)[m
[32m+[m
[32m+[m[32mset(PROJECT_SOURCES[m
[32m+[m[32m        main.cpp[m
[32m+[m[32m        mainwindow.cpp[m
[32m+[m[32m        mainwindow.h[m
[32m+[m[32m        mainwindow.ui[m
[32m+[m[32m)[m
[32m+[m
[32m+[m[32mif(${QT_VERSION_MAJOR} GREATER_EQUAL 6)[m
[32m+[m[32m    qt_add_executable(QtMem0ry[m
[32m+[m[32m        MANUAL_FINALIZATION[m
[32m+[m[32m        ${PROJECT_SOURCES}[m
[32m+[m[32m        gamescene.h gamescene.cpp[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m        util.h util.cpp[m
[32m+[m[32m        downloadhandler.h downloadhandler.cpp[m
[32m+[m[32m        memorypanel.h memorypanel.cpp[m
[32m+[m[32m        memorycard.h memorycard.cpp[m
[32m+[m[32m        animatedwidget.h animatedwidget.cpp[m
[32m+[m[32m        aboutdialog.h aboutdialog.cpp aboutdialog.ui[m
[32m+[m
[32m+[m[32m    )[m
[32m+[m[32m# Define target properties for Android with Qt 6 as:[m
[32m+[m[32m#    set_property(TARGET QtMem0ry APPEND PROPERTY QT_ANDROID_PACKAGE_SOURCE_DIR[m
[32m+[m[32m#                 ${CMAKE_CURRENT_SOURCE_DIR}/android)[m
[32m+[m[32m# For more information, see https://doc.qt.io/qt-6/qt-add-executable.html#target-creation[m
[32m+[m[32melse()[m
[32m+[m[32m    if(ANDROID)[m
[32m+[m[32m        add_library(QtMem0ry SHARED[m
[32m+[m[32m            ${PROJECT_SOURCES}[m
[32m+[m[32m        )[m
[32m+[m[32m# Define properties for Android with Qt 5 after find_package() calls as:[m
[32m+[m[32m#    set(ANDROID_PACKAGE_SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/android")[m
[32m+[m[32m    else()[m
[32m+[m[32m        add_executable(QtMem0ry[m
[32m+[m[32m            ${PROJECT_SOURCES}[m
[32m+[m[32m        )[m
[32m+[m[32m    endif()[m
[32m+[m[32mendif()[m
[32m+[m
[32m+[m[32mtarget_link_libraries(QtMem0ry PRIVATE Qt${QT_VERSION_MAJOR}::Widgets Qt${QT_VERSION_MAJOR}::Network ${CURL_LIBRARIES})[m
[32m+[m
[32m+[m[32m# Qt for iOS sets MACOSX_BUNDLE_GUI_IDENTIFIER automatically since Qt 6.1.[m
[32m+[m[32m# If you are developing for iOS or macOS you should consider setting an[m
[32m+[m[32m# explicit, fixed bundle identifier manually though.[m
[32m+[m[32mif(${QT_VERSION} VERSION_LESS 6.1.0)[m
[32m+[m[32m  set(BUNDLE_ID_OPTION MACOSX_BUNDLE_GUI_IDENTIFIER com.example.QtMem0ry)[m
[32m+[m[32mendif()[m
[32m+[m[32mset_target_properties(QtMem0ry PROPERTIES[m
[32m+[m[32m    ${BUNDLE_ID_OPTION}[m
[32m+[m[32m    MACOSX_BUNDLE_BUNDLE_VERSION ${PROJECT_VERSION}[m
[32m+[m[32m    MACOSX_BUNDLE_SHORT_VERSION_STRING ${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}[m
[32m+[m[32m    MACOSX_BUNDLE TRUE[m
[32m+[m[32m    WIN32_EXECUTABLE TRUE[m
[32m+[m[32m)[m
[32m+[m
[32m+[m[32minclude(GNUInstallDirs)[m
[32m+[m[32minstall(TARGETS QtMem0ry[m
[32m+[m[32m    BUNDLE DESTINATION .[m
[32m+[m[32m    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}[m
[32m+[m[32m    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}[m
[32m+[m[32m)[m
[32m+[m
[32m+[m[32mif(QT_VERSION_MAJOR EQUAL 6)[m
[32m+[m[32m    qt_finalize_executable(QtMem0ry)[m
[32m+[m[32mendif()[m
[1mdiff --git a/aboutdialog.cpp b/aboutdialog.cpp[m
[1mnew file mode 100644[m
[1mindex 0000000..c3ba1b4[m
[1m--- /dev/null[m
[1m+++ b/aboutdialog.cpp[m
[36m@@ -0,0 +1,14 @@[m
[32m+[m[32m#include "aboutdialog.h"[m
[32m+[m[32m#include "ui_aboutdialog.h"[m
[32m+[m
[32m+[m[32mAboutDialog::AboutDialog(QWidget *parent)[m
[32m+[m[32m    : QDialog(parent)[m
[32m+[m[32m    , ui(new Ui::AboutDialog)[m
[32m+[m[32m{[m
[32m+[m[32m    ui->setupUi(this);[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mAboutDialog::~AboutDialog()[m
[32m+[m[32m{[m
[32m+[m[32m    delete ui;[m
[32m+[m[32m}[m
[1mdiff --git a/aboutdialog.h b/aboutdialog.h[m
[1mnew file mode 100644[m
[1mindex 0000000..4474ece[m
[1m--- /dev/null[m
[1m+++ b/aboutdialog.h[m
[36m@@ -0,0 +1,22 @@[m
[32m+[m[32m#ifndef ABOUTDIALOG_H[m
[32m+[m[32m#define ABOUTDIALOG_H[m
[32m+[m
[32m+[m[32m#include <QDialog>[m
[32m+[m
[32m+[m[32mnamespace Ui {[m
[32m+[m[32mclass AboutDialog;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mclass AboutDialog : public QDialog[m
[32m+[m[32m{[m
[32m+[m[32m    Q_OBJECT[m
[32m+[m
[32m+[m[32mpublic:[m
[32m+[m[32m    explicit AboutDialog(QWidget *parent = nullptr);[m
[32m+[m[32m    ~AboutDialog();[m
[32m+[m
[32m+[m[32mprivate:[m
[32m+[m[32m    Ui::AboutDialog *ui;[m
[32m+[m[32m};[m
[32m+[m
[32m+[m[32m#endif // ABOUTDIALOG_H[m
[1mdiff --git a/aboutdialog.ui b/aboutdialog.ui[m
[1mnew file mode 100644[m
[1mindex 0000000..35c6705[m
[1m--- /dev/null[m
[1m+++ b/aboutdialog.ui[m
[36m@@ -0,0 +1,116 @@[m
[32m+[m[32m<?xml version="1.0" encoding="UTF-8"?>[m
[32m+[m[32m<ui version="4.0">[m
[32m+[m[32m <class>AboutDialog</class>[m
[32m+[m[32m <widget class="QDialog" name="AboutDialog">[m
[32m+[m[32m  <property name="windowModality">[m
[32m+[m[32m   <enum>Qt::ApplicationModal</enum>[m
[32m+[m[32m  </property>[m
[32m+[m[32m  <property name="geometry">[m
[32m+[m[32m   <rect>[m
[32m+[m[32m    <x>0</x>[m
[32m+[m[32m    <y>0</y>[m
[32m+[m[32m    <width>513</width>[m
[32m+[m[32m    <height>306</height>[m
[32m+[m[32m   </rect>[m
[32m+[m[32m  </property>[m
[32m+[m[32m  <property name="windowTitle">[m
[32m+[m[32m   <string>About</string>[m
[32m+[m[32m  </property>[m
[32m+[m[32m  <layout class="QVBoxLayout" name="verticalLayout">[m
[32m+[m[32m   <item>[m
[32m+[m[32m    <layout class="QHBoxLayout" name="horizontalLayout">[m
[32m+[m[32m     <item>[m
[32m+[m[32m      <widget class="QLabel" name="label">[m
[32m+[m[32m       <property name="sizePolicy">[m
[32m+[m[32m        <sizepolicy hsizetype="Fixed" vsizetype="Preferred">[m
[32m+[m[32m         <horstretch>0</horstretch>[m
[32m+[m[32m         <verstretch>0</verstretch>[m
[32m+[m[32m        </sizepolicy>[m
[32m+[m[32m       </property>[m
[32m+[m[32m       <property name="text">[m
[32m+[m[32m        <string>## QM</string>[m
[32m+[m[32m       </property>[m
[32m+[m[32m       <property name="textFormat">[m
[32m+[m[32m        <enum>Qt::MarkdownText</enum>[m
[32m+[m[32m       </property>[m
[32m+[m[32m       <property name="alignment">[m
[32m+[m[32m        <set>Qt::AlignLeading|Qt::AlignLeft|Qt::AlignTop</set>[m
[32m+[m[32m       </property>[m
[32m+[m[32m       <property name="margin">[m
[32m+[m[32m        <number>8</number>[m
[32m+[m[32m       </property>[m
[32m+[m[32m      </widget>[m
[32m+[m[32m     </item>[m
[32m+[m[32m     <item>[m
[32m+[m[32m      <widget class="QLabel" name="label_2">[m
[32m+[m[32m       <property name="text">[m
[32m+[m[32m        <string>## QtMem0ry[m
[32m+[m
[32m+[m[32mA simple Mem0ry Game in Qt (C++)[m
[32m+[m[32mThe Cards are Widgets.[m
[32m+[m
[32m+[m[32mExcercise code from Stepan[m
[32m+[m
[32m+[m[32mContact [stepan.rutz AT stepanrutz.com](mailto:stepan.rutz@stepanrutz.com)</string>[m
[32m+[m[32m       </property>[m
[32m+[m[32m       <property name="textFormat">[m
[32m+[m[32m        <enum>Qt::MarkdownText</enum>[m
[32m+[m[32m       </property>[m
[32m+[m[32m       <property name="alignment">[m
[32m+[m[32m        <set>Qt::AlignLeading|Qt::AlignLeft|Qt::AlignTop</set>[m
[32m+[m[32m       </property>[m
[32m+[m[32m       <property name="margin">[m
[32m+[m[32m        <number>8</number>[m
[32m+[m[32m       </property>[m
[32m+[m[32m      </widget>[m
[32m+[m[32m     </item>[m
[32m+[m[32m    </layout>[m
[32m+[m[32m   </item>[m
[32m+[m[32m   <item>[m
[32m+[m[32m    <widget class="QDialogButtonBox" name="buttonBox">[m
[32m+[m[32m     <property name="orientation">[m
[32m+[m[32m      <enum>Qt::Horizontal</enum>[m
[32m+[m[32m     </property>[m
[32m+[m[32m     <property name="standardButtons">[m
[32m+[m[32m      <set>QDialogButtonBox::Close</set>[m
[32m+[m[32m     </property>[m
[32m+[m[32m    </widget>[m
[32m+[m[32m   </item>[m
[32m+[m[32m  </layout>[m
[32m+[m[32m </widget>[m
[32m+[m[32m <resources/>[m
[32m+[m[32m <connections>[m
[32m+[m[32m  <connection>[m
[32m+[m[32m   <sender>buttonBox</sender>[m
[32m+[m[32m   <signal>accepted()</signal>[m
[32m+[m[32m   <receiver>AboutDialog</receiver>[m
[32m+[m[32m   <slot>accept()</slot>[m
[32m+[m[32m   <hints>[m
[32m+[m[32m    <hint type="sourcelabel">[m
[32m+[m[32m     <x>248</x>[m
[32m+[m[32m     <y>254</y>[m
[32m+[m[32m    </hint>[m
[32m+[m[32m    <hint type="destinationlabel">[m
[32m+[m[32m     <x>157</x>[m
[32m+[m[32m     <y>274</y>[m
[32m+[m[32m    </hint>[m
[32m+[m[32m   </hints>[m
[32m+[m[32m  </connection>[m
[32m+[m[32m  <connection>[m
[32m+[m[32m   <sender>buttonBox</sender>[m
[32m+[m[32m   <signal>rejected()</signal>[m
[32m+[m[32m   <receiver>AboutDialog</receiver>[m
[32m+[m[32m   <slot>reject()</slot>[m
[32m+[m[32m   <hints>[m
[32m+[m[32m    <hint type="sourcelabel">[m
[32m+[m[32m     <x>316</x>[m
[32m+[m[32m     <y>260</y>[m
[32m+[m[32m    </hint>[m
[32m+[m[32m    <hint type="destinationlabel">[m
[32m+[m[32m     <x>286</x>[m
[32m+[m[32m     <y>274</y>[m
[32m+[m[32m    </hint>[m
[32m+[m[32m   </hints>[m
[32m+[m[32m  </connection>[m
[32m+[m[32m </connections>[m
[32m+[m[32m</ui>[m
[1mdiff --git a/animatedwidget.cpp b/animatedwidget.cpp[m
[1mnew file mode 100644[m
[1mindex 0000000..80e0f63[m
[1m--- /dev/null[m
[1m+++ b/animatedwidget.cpp[m
[36m@@ -0,0 +1,37 @@[m
[32m+[m[32m#include "animatedwidget.h"[m
[32m+[m
[32m+[m[32mAnimatedWidget::AnimatedWidget(QWidget *parent)[m
[32m+[m[32m    : m_position(QPoint(0, 0)), positionAnimation(nullptr), QWidget{parent}[m
[32m+[m[32m{}[m
[32m+[m
[32m+[m[32mQPoint AnimatedWidget::position() const[m
[32m+[m[32m{[m
[32m+[m[32m    return this->m_position;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mvoid AnimatedWidget::setPosition(const QPoint position)[m
[32m+[m[32m{[m
[32m+[m[32m    qDebug() << "setPosition. oldValue=" << m_position << " to " << position[m
[32m+[m[32m             << (m_position == position);[m
[32m+[m[32m    if (m_position == position) {[m
[32m+[m[32m        return;[m
[32m+[m[32m    }[m
[32m+[m[32m    m_position = position;[m
[32m+[m[32m    this->move(m_position);[m
[32m+[m[32m    emit positionChanged(m_position);[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mvoid AnimatedWidget::setPositionA(const QPoint position)[m
[32m+[m[32m{[m
[32m+[m[32m    if (positionAnimation) {[m
[32m+[m[32m        positionAnimation->stop();[m
[32m+[m[32m        delete positionAnimation;[m
[32m+[m[32m    }[m
[32m+[m[32m    auto anim = new QPropertyAnimation(this, "position");[m
[32m+[m[32m    this->positionAnimation = anim;[m
[32m+[m[32m    anim->setEasingCurve(QEasingCurve::InOutCubic);[m
[32m+[m[32m    anim->setDuration(350);[m
[32m+[m[32m    anim->setStartValue(m_position);[m
[32m+[m[32m    anim->setEndValue(position);[m
[32m+[m[32m    anim->start();[m
[32m+[m[32m}[m
[1mdiff --git a/animatedwidget.h b/animatedwidget.h[m
[1mnew file mode 100644[m
[1mindex 0000000..9b10b5d[m
[1m--- /dev/null[m
[1m+++ b/animatedwidget.h[m
[36m@@ -0,0 +1,26 @@[m
[32m+[m[32m#ifndef ANIMATEDWIDGET_H[m
[32m+[m[32m#define ANIMATEDWIDGET_H[m
[32m+[m
[32m+[m[32m#include <QPropertyAnimation>[m
[32m+[m[32m#include <QWidget>[m
[32m+[m
[32m+[m[32mclass AnimatedWidget : public QWidget[m
[32m+[m[32m{[m
[32m+[m[32m    Q_OBJECT[m
[32m+[m[32mpublic:[m
[32m+[m[32m    Q_PROPERTY(QPoint position READ position WRITE setPosition NOTIFY positionChanged)[m
[32m+[m
[32m+[m[32m    explicit AnimatedWidget(QWidget *parent = nullptr);[m
[32m+[m[32m    QPoint position() const;[m
[32m+[m[32m    void setPosition(const QPoint position);[m
[32m+[m[32m    void setPositionA(const QPoint position); // animated[m
[32m+[m
[32m+[m[32msignals:[m
[32m+[m[32m    void positionChanged(const QPoint point);[m
[32m+[m
[32m+[m[32mprivate:[m
[32m+[m[32m    QPoint m_position;[m
[32m+[m[32m    QPropertyAnimation *positionAnimation;[m
[32m+[m[32m};[m
[32m+[m
[32m+[m[32m#endif // ANIMATEDWIDGET_H[m
[1mdiff --git a/downloadhandler.cpp b/downloadhandler.cpp[m
[1mnew file mode 100644[m
[1mindex 0000000..6b87820[m
[1m--- /dev/null[m
[1m+++ b/downloadhandler.cpp[m
[36m@@ -0,0 +1,135 @@[m
[32m+[m
[32m+[m[32m#include "downloadhandler.h"[m
[32m+[m[32m#include "util.h"[m
[32m+[m
[32m+[m[32m#include <QThread>[m
[32m+[m
[32m+[m
[32m+[m[32mconst QString images[] = {[m
[32m+[m[32m    "https://images.pexels.com/photos/47547/squirrel-animal-cute-rodents-47547.jpeg?auto=compress&cs=tinysrgb&h=350",[m
[32m+[m[32m    "https://images.pexels.com/photos/1661179/pexels-photo-1661179.jpeg?auto=compress&cs=tinysrgb&h=350",[m
[32m+[m[32m    "https://images.pexels.com/photos/792381/pexels-photo-792381.jpeg?auto=compress&cs=tinysrgb&h=350",[m
[32m+[m[32m    "https://images.pexels.com/photos/34231/antler-antler-carrier-fallow-deer-hirsch.jpg?auto=compress&cs=tinysrgb&h=350",[m
[32m+[m[32m    "https://images.pexels.com/photos/62289/yemen-chameleon-chamaeleo-calyptratus-chameleon-reptile-62289.jpeg?auto=compress&cs=tinysrgb&h=350",[m
[32m+[m[32m    "https://images.pexels.com/photos/67552/giraffe-tall-mammal-africa-67552.jpeg?auto=compress&cs=tinysrgb&h=350",[m
[32m+[m[32m    "https://images.pexels.com/photos/325045/pexels-photo-325045.jpeg?auto=compress&cs=tinysrgb&h=350",[m
[32m+[m[32m    "https://images.pexels.com/photos/162140/duckling-birds-yellow-fluffy-162140.jpeg?auto=compress&cs=tinysrgb&h=350",[m
[32m+[m[32m    /*[m
[32m+[m[32m    "https://images.pexels.com/photos/219906/pexels-photo-219906.jpeg?auto=compress&cs=tinysrgb&h=350",[m
[32m+[m[32m    "https://images.pexels.com/photos/17811/pexels-photo.jpg?auto=compress&cs=tinysrgb&h=350",[m
[32m+[m[32m    "https://images.pexels.com/photos/1108099/pexels-photo-1108099.jpeg?auto=compress&cs=tinysrgb&h=350",[m
[32m+[m[32m    "https://images.pexels.com/photos/97533/pexels-photo-97533.jpeg?auto=compress&cs=tinysrgb&h=350",[m
[32m+[m[32m    "https://images.pexels.com/photos/635499/pexels-photo-635499.jpeg?auto=compress&cs=tinysrgb&h=350",[m
[32m+[m[32m    "https://images.pexels.com/photos/162203/panthera-tigris-altaica-tiger-siberian-amurtiger-162203.jpeg?auto=compress&cs=tinysrgb&h=350",[m
[32m+[m[32m    "https://images.pexels.com/photos/326012/pexels-photo-326012.jpeg?auto=compress&cs=tinysrgb&h=350",[m
[32m+[m[32m    "https://images.pexels.com/photos/39857/leopard-leopard-spots-animal-wild-39857.jpeg?auto=compress&cs=tinysrgb&h=350",[m
[32m+[m[32m    */[m
[32m+[m[32m    /*[m
[32m+[m[32m    "https://images.pexels.com/photos/572861/pexels-photo-572861.jpeg?auto=compress&cs=tinysrgb&h=350",[m
[32m+[m[32m    "https://images.pexels.com/photos/847393/pexels-photo-847393.jpeg?auto=compress&cs=tinysrgb&h=350",[m
[32m+[m[32m    "https://images.pexels.com/photos/2295744/pexels-photo-2295744.jpeg?auto=compress&cs=tinysrgb&h=350",[m
[32m+[m[32m    "https://images.pexels.com/photos/1076758/pexels-photo-1076758.jpeg?auto=compress&cs=tinysrgb&h=350",[m
[32m+[m[32m    "https://images.pexels.com/photos/45853/grey-crowned-crane-bird-crane-animal-45853.jpeg?auto=compress&cs=tinysrgb&h=350",[m
[32m+[m[32m    "https://images.pexels.com/photos/86405/penguin-funny-blue-water-86405.jpeg?auto=compress&cs=tinysrgb&h=350",[m
[32m+[m[32m    "https://images.pexels.com/photos/70080/elephant-africa-african-elephant-kenya-70080.jpeg?auto=compress&cs=tinysrgb&h=350",[m
[32m+[m[32m    "https://images.pexels.com/photos/460775/pexels-photo-460775.jpeg?auto=compress&cs=tinysrgb&h=350",[m
[32m+[m[32m    "https://images.pexels.com/photos/50577/hedgehog-animal-baby-cute-50577.jpeg?auto=compress&cs=tinysrgb&h=350",[m
[32m+[m[32m    "https://images.pexels.com/photos/144234/bull-landscape-nature-mammal-144234.jpeg?auto=compress&cs=tinysrgb&h=350",[m
[32m+[m[32m    "https://images.pexels.com/photos/3608263/pexels-photo-3608263.jpeg?auto=compress&cs=tinysrgb&h=350",[m
[32m+[m[32m    "https://images.pexels.com/photos/1851164/pexels-photo-1851164.jpeg?auto=compress&cs=tinysrgb&h=350",[m
[32m+[m[32m    "https://images.pexels.com/photos/1319515/pexels-photo-1319515.jpeg?auto=compress&cs=tinysrgb&h=350",[m
[32m+[m[32m    "https://images.pexels.com/photos/1207875/pexels-photo-1207875.jpeg?auto=compress&cs=tinysrgb&h=350",[m
[32m+[m[32m    "https://images.pexels.com/photos/1499596/pexels-photo-1499596.jpeg?auto=compress&cs=tinysrgb&h=350",[m
[32m+[m[32m    "https://images.pexels.com/photos/302304/pexels-photo-302304.jpeg?auto=compress&cs=tinysrgb&h=350",[m
[32m+[m[32m    "https://images.pexels.com/photos/106685/pexels-photo-106685.jpeg?auto=compress&cs=tinysrgb&h=350",[m
[32m+[m[32m    "https://images.pexels.com/photos/34770/haan-crows-mohawk.jpg?auto=compress&cs=tinysrgb&h=350",[m
[32m+[m[32m    "https://images.pexels.com/photos/45246/green-tree-python-python-tree-python-green-45246.jpeg?auto=compress&cs=tinysrgb&h=350",[m
[32m+[m[32m    "https://images.pexels.com/photos/4588065/pexels-photo-4588065.jpeg?auto=compress&cs=tinysrgb&h=350",[m
[32m+[m[32m    "https://images.pexels.com/photos/1335971/pexels-photo-1335971.jpeg?auto=compress&cs=tinysrgb&h=350",[m
[32m+[m[32m    "https://images.pexels.com/photos/64219/dolphin-marine-mammals-water-sea-64219.jpeg?auto=compress&cs=tinysrgb&h=350",[m
[32m+[m[32m    "https://images.pexels.com/photos/76957/tree-frog-frog-red-eyed-amphibian-76957.jpeg?auto=compress&cs=tinysrgb&h=350",[m
[32m+[m[32m    "https://images.pexels.com/photos/53125/elephant-tusk-ivory-animal-53125.jpeg?auto=compress&cs=tinysrgb&h=350",[m
[32m+[m[32m    "https://images.pexels.com/photos/1829979/pexels-photo-1829979.jpeg?auto=compress&cs=tinysrgb&h=350",[m
[32m+[m[32m    "https://images.pexels.com/photos/75973/pexels-photo-75973.jpeg?auto=compress&cs=tinysrgb&h=350",[m
[32m+[m[32m    "https://images.pexels.com/photos/598966/pexels-photo-598966.jpeg?auto=compress&cs=tinysrgb&h=350",[m
[32m+[m[32m    "https://images.pexels.com/photos/33045/lion-wild-africa-african.jpg?auto=compress&cs=tinysrgb&h=350",[m
[32m+[m[32m    "https://images.pexels.com/photos/225869/pexels-photo-225869.jpeg?auto=compress&cs=tinysrgb&h=350",[m
[32m+[m[32m    "https://images.pexels.com/photos/406014/pexels-photo-406014.jpeg?auto=compress&cs=tinysrgb&h=350",[m
[32m+[m[32m    "https://images.pexels.com/photos/69932/tabby-cat-close-up-portrait-69932.jpeg?auto=compress&cs=tinysrgb&h=350",[m
[32m+[m[32m    "https://images.pexels.com/photos/36347/cow-pasture-animal-almabtrieb.jpg?auto=compress&cs=tinysrgb&h=350",[m
[32m+[m[32m    "https://images.pexels.com/photos/1059823/pexels-photo-1059823.jpeg?auto=compress&cs=tinysrgb&h=350",[m
[32m+[m[32m    "https://images.pexels.com/photos/53581/bald-eagles-bald-eagle-bird-of-prey-adler-53581.jpeg?auto=compress&cs=tinysrgb&h=350",[m
[32m+[m[32m    "https://images.pexels.com/photos/73825/osprey-adler-bird-of-prey-raptor-73825.jpeg?auto=compress&cs=tinysrgb&h=350",[m
[32m+[m[32m    "https://images.pexels.com/photos/236599/pexels-photo-236599.jpeg?auto=compress&cs=tinysrgb&h=350",[m
[32m+[m[32m    "https://images.pexels.com/photos/104827/cat-pet-animal-domestic-104827.jpeg?auto=compress&cs=tinysrgb&h=350",[m
[32m+[m[32m    "https://images.pexels.com/photos/56733/pexels-photo-56733.jpeg?auto=compress&cs=tinysrgb&h=350",[m
[32m+[m[32m    "https://images.pexels.com/photos/802112/pexels-photo-802112.jpeg?auto=compress&cs=tinysrgb&h=350",[m
[32m+[m[32m    "https://images.pexels.com/photos/234054/pexels-photo-234054.jpeg?auto=compress&cs=tinysrgb&h=350",[m
[32m+[m[32m    "https://images.pexels.com/photos/991831/pexels-photo-991831.jpeg?auto=compress&cs=tinysrgb&h=350",[m
[32m+[m[32m    "https://images.pexels.com/photos/38280/monkey-mandril-africa-baboon-38280.jpeg?auto=compress&cs=tinysrgb&h=350",[m
[32m+[m[32m    "https://images.pexels.com/photos/3551498/pexels-photo-3551498.jpeg?auto=compress&cs=tinysrgb&h=350",[m
[32m+[m[32m    "https://images.pexels.com/photos/314865/pexels-photo-314865.jpeg?auto=compress&cs=tinysrgb&h=350",[m
[32m+[m[32m    "https://images.pexels.com/photos/133394/pexels-photo-133394.jpeg?auto=compress&cs=tinysrgb&h=350",[m
[32m+[m[32m    "https://images.pexels.com/photos/16040/pexels-photo.jpg?auto=compress&cs=tinysrgb&h=350",[m
[32m+[m[32m    "https://images.pexels.com/photos/372166/pexels-photo-372166.jpeg?auto=compress&cs=tinysrgb&h=350",[m
[32m+[m[32m    "https://images.pexels.com/photos/86596/owl-bird-eyes-eagle-owl-86596.jpeg?auto=compress&cs=tinysrgb&h=350",[m
[32m+[m[32m    */[m
[32m+[m[32m};[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32mDownloadHandler::DownloadHandler(QObject *parent) : QObject(parent) {[m
[32m+[m[32m    qDebug() << "DownloadHandler()";[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mDownloadHandler::~DownloadHandler() {[m
[32m+[m[32m    qDebug() << "~DownloadHandler()";[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mvoid DownloadHandler::download() {[m
[32m+[m[32m    QString resourceFolder = QDir(QDir::homePath()).filePath("qtmemory-resources");[m
[32m+[m[32m    QDir dir(resourceFolder);[m
[32m+[m[32m    if (!dir.exists()) {[m
[32m+[m[32m        if (dir.mkpath(resourceFolder)) {[m
[32m+[m[32m            qDebug() << "Temporary directory created at:" << resourceFolder;[m
[32m+[m[32m        } else {[m
[32m+[m[32m            qDebug() << "Failed to create temporary directory.";[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    QString apiKey = getenv("PEXELSAPIKEY");[m
[32m+[m[32m    apiKey = "Zkm7aXuvJSw9Hp6uC3L1Nu70wPLU0zWIIRE8eJrfB06B72kSf4xwhVeO";[m
[32m+[m
[32m+[m[32m    qDebug() << "image download starting on thread " << QThread::currentThread()->objectName();[m
[32m+[m[32m    qDebug() << "using apiKey: " << apiKey;[m
[32m+[m[32m    auto imageCount = sizeof(images) / sizeof(QString);[m
[32m+[m[32m    for (auto i = 0; i < imageCount; i++) {[m
[32m+[m[32m        auto filePath = dir.filePath(QString::asprintf("image_%02d.jpg", i + 1));[m
[32m+[m[32m        auto file = QFile(filePath);[m
[32m+[m[32m        QByteArray data;[m
[32m+[m[32m        if (file.exists()) {[m
[32m+[m[32m            data = Util::loadFile(filePath);[m
[32m+[m[32m        } else {[m
[32m+[m[32m            QString url(images[i]);[m
[32m+[m[32m            auto result = Util::downloadUrl(url, { { "Authorization", apiKey }});[m
[32m+[m[32m            if (result.code != 200) {[m
[32m+[m[32m                qWarning() << "download failed " << url;[m
[32m+[m[32m                return;[m
[32m+[m[32m            }[m
[32m+[m[32m            if (!file.open(QIODevice::WriteOnly)) {[m
[32m+[m[32m                qWarning() << "Could not open file for writing";[m
[32m+[m[32m            }[m
[32m+[m[32m            if (file.write(result.data) == -1) {[m
[32m+[m[32m                qWarning() << "Failed to write to file " << filePath;[m
[32m+[m[32m            }[m
[32m+[m[32m            file.close();[m
[32m+[m[32m            qDebug() << "download completed: " << url;[m
[32m+[m[32m            data = result.data;[m
[32m+[m[32m        }[m
[32m+[m[32m        emit imageCompleted(i, imageCount, data);[m
[32m+[m[32m    }[m
[32m+[m[32m    qDebug() << "completed " << this << " on thread " << QThread::currentThread()->objectName();[m
[32m+[m[32m    emit completed();[m
[32m+[m[32m}[m
[32m+[m
[32m+[m
[1mdiff --git a/downloadhandler.h b/downloadhandler.h[m
[1mnew file mode 100644[m
[1mindex 0000000..e5b4c73[m
[1m--- /dev/null[m
[1m+++ b/downloadhandler.h[m
[36m@@ -0,0 +1,26 @@[m
[32m+[m[32m#ifndef DOWNLOADHANDLER_H[m
[32m+[m[32m#define DOWNLOADHANDLER_H[m
[32m+[m
[32m+[m[32m#include <QObject>[m
[32m+[m[32m#include <QDir>[m
[32m+[m[32m#include <QDebug>[m
[32m+[m
[32m+[m
[32m+[m[32mclass DownloadHandler : public QObject {[m
[32m+[m[32m    Q_OBJECT[m
[32m+[m
[32m+[m[32mpublic:[m
[32m+[m[32m    explicit DownloadHandler(QObject *parent = nullptr);[m
[32m+[m[32m    ~DownloadHandler();[m
[32m+[m
[32m+[m[32mpublic slots:[m
[32m+[m[32m    void download();[m
[32m+[m
[32m+[m[32msignals:[m
[32m+[m[32m    void imageCompleted(int i, int n, const QByteArray &data);[m
[32m+[m[32m    void completed();[m
[32m+[m
[32m+[m[32mprivate:[m
[32m+[m
[32m+[m[32m};[m
[32m+[m[32m#endif // DOWNLOADHANDLER_H[m
[1mdiff --git a/gamescene.cpp b/gamescene.cpp[m
[1mnew file mode 100644[m
[1mindex 0000000..4c69ec2[m
[1m--- /dev/null[m
[1m+++ b/gamescene.cpp[m
[36m@@ -0,0 +1,138 @@[m
[32m+[m
[32m+[m[32m#include <QDebug>[m
[32m+[m[32m#include <QString>[m
[32m+[m[32m#include <QGraphicsItem>[m
[32m+[m[32m#include <QResizeEvent>[m
[32m+[m[32m#include <QDir>[m
[32m+[m
[32m+[m
[32m+[m[32m#include <QObject>[m
[32m+[m[32m#include <QNetworkAccessManager>[m
[32m+[m[32m#include <QNetworkRequest>[m
[32m+[m[32m#include <QNetworkReply>[m
[32m+[m[32m#include <QEventLoop>[m
[32m+[m[32m#include <QUrl>[m
[32m+[m[32m#include <QDebug>[m
[32m+[m[32m#include <QThread>[m
[32m+[m[32m#include <QVBoxLayout>[m
[32m+[m[32m#include <QPropertyAnimation>[m
[32m+[m
[32m+[m[32m#include "gamescene.h"[m
[32m+[m[32m#include "util.h"[m
[32m+[m[32m#include "downloadhandler.h"[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32mGameScene::GameScene(QWidget *parent)[m
[32m+[m[32m    : QGraphicsView{parent}[m
[32m+[m[32m{[m
[32m+[m[32m    qDebug() << "GameScene()";[m
[32m+[m[32m    this->setViewportUpdateMode(QGraphicsView::SmartViewportUpdate);[m
[32m+[m[32m    this->setTransformationAnchor(QGraphicsView::AnchorUnderMouse);[m
[32m+[m[32m    this->scene = new QGraphicsScene(this);[m
[32m+[m[32m    this->scene->setBackgroundBrush(QBrush(QColor(255, 255, 255)));[m
[32m+[m[32m    this->setAlignment(Qt::AlignTop | Qt::AlignLeft);[m
[32m+[m[32m    this->initResources();[m
[32m+[m[32m    this->setScene(scene);[m
[32m+[m[32m    this->layoutScene();[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mGameScene::~GameScene()[m
[32m+[m[32m{[m
[32m+[m[32m    qDebug() << "~GameScene()";[m
[32m+[m[32m}[m
[32m+[m
[32m+[m
[32m+[m[32mvoid GameScene::resizeEvent(QResizeEvent *event)[m
[32m+[m[32m{[m
[32m+[m[32m    QWidget::resizeEvent(event); // base class handler[m
[32m+[m[32m    auto parent = this->parentWidget();[m
[32m+[m[32m    double scale = std::min(parent->width(), parent->height()) / 1000.0;[m
[32m+[m[32m    qInfo() << "resize" << event->size() << ", scale=" << scale;[m
[32m+[m[32m    //this->setTransform(QTransform::fromScale(scale, scale));[m
[32m+[m[32m    this->layoutScene();[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mvoid GameScene::initResources()[m
[32m+[m[32m{[m
[32m+[m[32m    QThread *downloadThread = new QThread();[m
[32m+[m[32m    downloadThread->setObjectName("downloader thread");[m
[32m+[m[32m    DownloadHandler *handler = new DownloadHandler();[m
[32m+[m[32m    handler->moveToThread(downloadThread);[m
[32m+[m
[32m+[m[32m    QObject::connect(downloadThread, &QThread::started, handler, &DownloadHandler::download);[m
[32m+[m[32m    QObject::connect(handler, &DownloadHandler::completed, this, [=]() {[m
[32m+[m[32m        handler->deleteLater();[m
[32m+[m[32m        this->layoutScene();[m
[32m+[m[32m    });[m
[32m+[m
[32m+[m[32m    QObject::connect(handler, &DownloadHandler::imageCompleted, this, [=](int i, int n, QByteArray data) {[m
[32m+[m[32m        qDebug() << "image " << i << " downloaded " << QThread::currentThread()->objectName();[m
[32m+[m[32m        Util::findStatusBar()->showMessage(QString("Retrieved Image %1 of %2").arg(i + 1).arg(n), 5000);[m
[32m+[m[32m        QPixmap pixmap;[m
[32m+[m[32m        bool success = pixmap.loadFromData(data);[m
[32m+[m[32m        if (!success) {[m
[32m+[m[32m            qDebug() << "failed to load image " << i << " into pixmap";[m
[32m+[m[32m            return;[m
[32m+[m[32m        }[m
[32m+[m[32m        int size = qMin(pixmap.width(), pixmap.height());[m
[32m+[m[32m        QRect cropRect;[m
[32m+[m[32m        if (pixmap.width() > pixmap.height()) {[m
[32m+[m[32m            int offsetX = (pixmap.width() - size) / 2;[m
[32m+[m[32m            cropRect.setRect(offsetX, 0, size, size);[m
[32m+[m[32m        } else {[m
[32m+[m[32m            int offsetY = (pixmap.height() - size) / 2;[m
[32m+[m[32m            cropRect.setRect(0, offsetY, size, size);[m
[32m+[m[32m        }[m
[32m+[m[32m        QPixmap squaredPixmap = pixmap.copy(cropRect);[m
[32m+[m[32m        //int w2 = squaredPixmap.width();[m
[32m+[m[32m        //int h2 = squaredPixmap.height();[m
[32m+[m[32m        //qDebug() << "w2=" << w2 << ", h2=" << h2 << "   crop=" << cropRect;[m
[32m+[m[32m        auto pi = new QGraphicsPixmapItem(squaredPixmap);[m
[32m+[m[32m        auto scaledSize = 64.0;[m
[32m+[m[32m        auto scale = qMin(scaledSize / squaredPixmap.width(), scaledSize / squaredPixmap.height());[m
[32m+[m[32m        pi->setScale(scale);[m
[32m+[m[32m        pi->setPos(0, 0);[m
[32m+[m[32m        scene->addItem(pi);[m
[32m+[m[32m    });[m
[32m+[m[32m    QObject::connect(downloadThread, &QThread::finished, downloadThread, &QObject::deleteLater);[m
[32m+[m[32m    downloadThread->start();[m
[32m+[m[32m}[m
[32m+[m
[32m+[m
[32m+[m[32mvoid GameScene::layoutScene()[m
[32m+[m[32m{[m
[32m+[m[32m    auto aw = this->size().width();[m
[32m+[m[32m    auto ah = this->size().height();[m
[32m+[m[32m    auto padding = 16;[m
[32m+[m[32m    auto dist = 10;[m
[32m+[m[32m    //auto tw = ((aw - padding * 2) - (7 - dist)) / 8;[m
[32m+[m[32m    auto tw = 64;[m
[32m+[m
[32m+[m[32m    qDebug() << "layoutScene(): aw=" << aw << ", ah=" << ah;[m
[32m+[m[32m    auto cards = std::vector<QGraphicsItem*>();[m
[32m+[m[32m    for(auto item : this->scene->items()) {[m
[32m+[m[32m        cards.push_back(item);[m
[32m+[m[32m    }[m
[32m+[m[32m    auto size = static_cast<int>(sqrt(cards.size()));[m
[32m+[m[32m    auto y = padding;[m
[32m+[m[32m    for (int row = 0; row < size; row++) {[m
[32m+[m[32m        auto x = padding;[m
[32m+[m[32m        for (int col = 0; col < size; col++) {[m
[32m+[m[32m            auto item = cards[row * size + col];[m
[32m+[m[32m            /*[m
[32m+[m[32m            auto brect = item->boundingRect();[m
[32m+[m[32m            auto scaleX = tw / brect.width();[m
[32m+[m[32m            auto scaleY = tw / brect.height();[m
[32m+[m[32m            auto scale= qMin(scaleX, scaleY);[m
[32m+[m[32m            item->setScale(scale);[m
[32m+[m[32m            */[m
[32m+[m[32m            item->setPos(x, y);[m
[32m+[m[32m            x += tw + dist;[m
[32m+[m[32m        }[m
[32m+[m[32m        y += tw + dist;[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[32m+[m
[32m+[m
[32m+[m
[1mdiff --git a/gamescene.h b/gamescene.h[m
[1mnew file mode 100644[m
[1mindex 0000000..598ff5d[m
[1m--- /dev/null[m
[1m+++ b/gamescene.h[m
[36m@@ -0,0 +1,26 @@[m
[32m+[m[32m#ifndef GAMESCENE_H[m
[32m+[m[32m#define GAMESCENE_H[m
[32m+[m
[32m+[m[32m#include <QWidget>[m
[32m+[m[32m#include <QGraphicsView>[m
[32m+[m
[32m+[m[32mclass GameScene : public QGraphicsView[m
[32m+[m[32m{[m
[32m+[m[32m    Q_OBJECT[m
[32m+[m[32mpublic:[m
[32m+[m[32m    explicit GameScene(QWidget *parent = nullptr);[m
[32m+[m[32m    ~GameScene();[m
[32m+[m
[32m+[m[32mprotected:[m
[32m+[m[32m    void resizeEvent(QResizeEvent *event) override;[m
[32m+[m
[32m+[m[32mprivate:[m
[32m+[m[32m    QGraphicsScene* scene;[m
[32m+[m
[32m+[m[32m    void initResources();[m
[32m+[m[32m    void layoutScene();[m
[32m+[m
[32m+[m[32msignals:[m
[32m+[m[32m};[m
[32m+[m
[32m+[m[32m#endif // GAMESCENE_H[m
[1mdiff --git a/main.cpp b/main.cpp[m
[1mnew file mode 100644[m
[1mindex 0000000..e29b4b6[m
[1m--- /dev/null[m
[1m+++ b/main.cpp[m
[36m@@ -0,0 +1,17 @@[m
[32m+[m[32m//#define QT_NO_CAST_FROM_ASCII 1[m
[32m+[m[32m#include "mainwindow.h"[m
[32m+[m
[32m+[m[32m#include <QApplication>[m
[32m+[m[32m#include <QThread>[m
[32m+[m
[32m+[m
[32m+[m[32mint main(int argc, char *argv[])[m
[32m+[m[32m{[m
[32m+[m[32m    QThread::currentThread()->setObjectName("Qt Mainthread");[m
[32m+[m
[32m+[m[32m    //QString s("abc");[m
[32m+[m[32m    QApplication a(argc, argv);[m
[32m+[m[32m    MainWindow w;[m
[32m+[m[32m    w.show();[m
[32m+[m[32m    return a.exec();[m
[32m+[m[32m}[m
[1mdiff --git a/mainwindow.cpp b/mainwindow.cpp[m
[1mnew file mode 100644[m
[1mindex 0000000..6301960[m
[1m--- /dev/null[m
[1m+++ b/mainwindow.cpp[m
[36m@@ -0,0 +1,34 @@[m
[32m+[m[32m#include <QVBoxLayout>[m
[32m+[m
[32m+[m
[32m+[m[32m#include "aboutdialog.h"[m
[32m+[m[32m#include "mainwindow.h"[m
[32m+[m[32m#include "./ui_mainwindow.h"[m
[32m+[m[32m#include "gamescene.h"[m
[32m+[m[32m#include "memorypanel.h"[m
[32m+[m
[32m+[m
[32m+[m[32mMainWindow::MainWindow(QWidget *parent)[m
[32m+[m[32m    : QMainWindow(parent)[m
[32m+[m[32m    , ui(new Ui::MainWindow)[m
[32m+[m[32m{[m
[32m+[m[32m    ui->setupUi(this);[m
[32m+[m
[32m+[m[32m    QObject::connect(ui->action_Quit, &QAction::triggered, this, [] {[m
[32m+[m[32m        QApplication::exit(0);[m
[32m+[m[32m    });[m
[32m+[m[32m    QObject::connect(ui->action_About_QtMem0ry, &QAction::triggered, this, [] {[m
[32m+[m[32m        AboutDialog dialog;[m
[32m+[m[32m        dialog.exec();[m
[32m+[m[32m    });[m
[32m+[m
[32m+[m[32m    auto memoryPanel = new MemoryPanel(this);[m
[32m+[m[32m    auto layout = new QVBoxLayout(ui->mainWidget);[m
[32m+[m[32m    layout->setContentsMargins(0, 0, 0, 0);[m
[32m+[m[32m    layout->addWidget(memoryPanel);[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mMainWindow::~MainWindow()[m
[32m+[m[32m{[m
[32m+[m[32m    delete ui;[m
[32m+[m[32m}[m
[1mdiff --git a/mainwindow.h b/mainwindow.h[m
[1mnew file mode 100644[m
[1mindex 0000000..f7a3da3[m
[1m--- /dev/null[m
[1m+++ b/mainwindow.h[m
[36m@@ -0,0 +1,23 @@[m
[32m+[m[32m#ifndef MAINWINDOW_H[m
[32m+[m[32m#define MAINWINDOW_H[m
[32m+[m
[32m+[m[32m#include <QMainWindow>[m
[32m+[m
[32m+[m[32mQT_BEGIN_NAMESPACE[m
[32m+[m[32mnamespace Ui {[m
[32m+[m[32mclass MainWindow;[m
[32m+[m[32m}[m
[32m+[m[32mQT_END_NAMESPACE[m
[32m+[m
[32m+[m[32mclass MainWindow : public QMainWindow[m
[32m+[m[32m{[m
[32m+[m[32m    Q_OBJECT[m
[32m+[m
[32m+[m[32mpublic:[m
[32m+[m[32m    MainWindow(QWidget *parent = nullptr);[m
[32m+[m[32m    ~MainWindow();[m
[32m+[m
[32m+[m[32mprivate:[m
[32m+[m[32m    Ui::MainWindow *ui;[m
[32m+[m[32m};[m
[32m+[m[32m#endif // MAINWINDOW_H[m
[1mdiff --git a/mainwindow.ui b/mainwindow.ui[m
[1mnew file mode 100644[m
[1mindex 0000000..6158659[m
[1m--- /dev/null[m
[1m+++ b/mainwindow.ui[m
[36m@@ -0,0 +1,81 @@[m
[32m+[m[32m<?xml version="1.0" encoding="UTF-8"?>[m
[32m+[m[32m<ui version="4.0">[m
[32m+[m[32m <class>MainWindow</class>[m
[32m+[m[32m <widget class="QMainWindow" name="MainWindow">[m
[32m+[m[32m  <property name="geometry">[m
[32m+[m[32m   <rect>[m
[32m+[m[32m    <x>0</x>[m
[32m+[m[32m    <y>0</y>[m
[32m+[m[32m    <width>900</width>[m
[32m+[m[32m    <height>900</height>[m
[32m+[m[32m   </rect>[m
[32m+[m[32m  </property>[m
[32m+[m[32m  <property name="windowTitle">[m
[32m+[m[32m   <string>QtMem0ry</string>[m
[32m+[m[32m  </property>[m
[32m+[m[32m  <widget class="QWidget" name="centralwidget">[m
[32m+[m[32m   <layout class="QVBoxLayout" name="verticalLayout_2">[m
[32m+[m[32m    <item>[m
[32m+[m[32m     <widget class="QWidget" name="mainWidget" native="true"/>[m
[32m+[m[32m    </item>[m
[32m+[m[32m   </layout>[m
[32m+[m[32m  </widget>[m
[32m+[m[32m  <widget class="QMenuBar" name="menubar">[m
[32m+[m[32m   <property name="geometry">[m
[32m+[m[32m    <rect>[m
[32m+[m[32m     <x>0</x>[m
[32m+[m[32m     <y>0</y>[m
[32m+[m[32m     <width>900</width>[m
[32m+[m[32m     <height>22</height>[m
[32m+[m[32m    </rect>[m
[32m+[m[32m   </property>[m
[32m+[m[32m   <widget class="QMenu" name="menu_File">[m
[32m+[m[32m    <property name="title">[m
[32m+[m[32m     <string>&amp;File</string>[m
[32m+[m[32m    </property>[m
[32m+[m[32m    <addaction name="separator"/>[m
[32m+[m[32m    <addaction name="actionStart_Game"/>[m
[32m+[m[32m    <addaction name="actionEnd_Game"/>[m
[32m+[m[32m    <addaction name="separator"/>[m
[32m+[m[32m    <addaction name="action_Quit"/>[m
[32m+[m[32m    <addaction name="separator"/>[m
[32m+[m[32m   </widget>[m
[32m+[m[32m   <widget class="QMenu" name="menu_About">[m
[32m+[m[32m    <property name="title">[m
[32m+[m[32m     <string>&amp;About</string>[m
[32m+[m[32m    </property>[m
[32m+[m[32m    <addaction name="action_About_QtMem0ry"/>[m
[32m+[m[32m   </widget>[m
[32m+[m[32m   <addaction name="menu_File"/>[m
[32m+[m[32m   <addaction name="menu_About"/>[m
[32m+[m[32m  </widget>[m
[32m+[m[32m  <widget class="QStatusBar" name="statusbar"/>[m
[32m+[m[32m  <action name="action_Quit">[m
[32m+[m[32m   <property name="text">[m
[32m+[m[32m    <string>&amp;Quit</string>[m
[32m+[m[32m   </property>[m
[32m+[m[32m  </action>[m
[32m+[m[32m  <action name="actionStart_Game">[m
[32m+[m[32m   <property name="text">[m
[32m+[m[32m    <string>Start Game</string>[m
[32m+[m[32m   </property>[m
[32m+[m[32m  </action>[m
[32m+[m[32m  <action name="actionEnd_Game">[m
[32m+[m[32m   <property name="text">[m
[32m+[m[32m    <string>End Game</string>[m
[32m+[m[32m   </property>[m
[32m+[m[32m  </action>[m
[32m+[m[32m  <action name="action_5">[m
[32m+[m[32m   <property name="text">[m
[32m+[m[32m    <string>_</string>[m
[32m+[m[32m   </property>[m
[32m+[m[32m  </action>[m
[32m+[m[32m  <action name="action_About_QtMem0ry">[m
[32m+[m[32m   <property name="text">[m
[32m+[m[32m    <string>&amp;About QtMem0ry</string>[m
[32m+[m[32m   </property>[m
[32m+[m[32m  </action>[m
[32m+[m[32m </widget>[m
[32m+[m[32m <resources/>[m
[32m+[m[32m <connections/>[m
[32m+[m[32m</ui>[m
[1mdiff --git a/memorycard.cpp b/memorycard.cpp[m
[1mnew file mode 100644[m
[1mindex 0000000..13eea71[m
[1m--- /dev/null[m
[1m+++ b/memorycard.cpp[m
[36m@@ -0,0 +1,121 @@[m
[32m+[m[32m#include <cmath>[m
[32m+[m[32m#include <QPainter>[m
[32m+[m[32m#include <QDebug>[m
[32m+[m[32m#include <QPropertyAnimation>[m
[32m+[m[32m#include "util.h"[m
[32m+[m[32m#include "memorycard.h"[m
[32m+[m[32m#include "memorypanel.h"[m
[32m+[m
[32m+[m[32mMemoryCard::MemoryCard(MemoryPanel *panel, const QString &key, const QPixmap &pixmap, const QPixmap &backPixmap, QWidget *parent) :[m
[32m+[m[32m    m_panel(panel),[m
[32m+[m[32m    m_key(key),[m
[32m+[m[32m    m_pixmap(pixmap),[m
[32m+[m[32m    m_backPixmap(backPixmap),[m
[32m+[m[32m    m_flipState(FlipState::FLIPPED),[m
[32m+[m[32m    m_angle(180),[m
[32m+[m[32m    angleAnimation(nullptr),[m
[32m+[m[32m    AnimatedWidget{parent}[m
[32m+[m[32m{[m
[32m+[m[32m    m_transform.reset();[m
[32m+[m
[32m+[m[32m    this->setCursor(Qt::PointingHandCursor);[m
[32m+[m[32m    //qDebug() << "the map: " << pixmap.width() << " x " << pixmap.height();[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mconst QString& MemoryCard::key() const {[m
[32m+[m[32m    return m_key;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mFlipState MemoryCard::flipState() const[m
[32m+[m[32m{[m
[32m+[m[32m    return this->m_flipState;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mdouble MemoryCard::angle() const[m
[32m+[m[32m{[m
[32m+[m[32m    return this->m_angle;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mvoid MemoryCard::setAngle(double angle)[m
[32m+[m[32m{[m
[32m+[m[32m    if (this->m_angle == angle) {[m
[32m+[m[32m        return;[m
[32m+[m[32m    }[m
[32m+[m[32m    this->m_angle = angle;[m
[32m+[m[32m    emit angleChanged(angle);[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mvoid MemoryCard::setAngleA(double angle, std::function<void()> onCompleteCallback) {[m
[32m+[m[32m    if (angleAnimation) {[m
[32m+[m[32m        angleAnimation->stop();[m
[32m+[m[32m        delete angleAnimation;[m
[32m+[m[32m    }[m
[32m+[m[32m    auto anim = new QPropertyAnimation(this, "angle");[m
[32m+[m[32m    anim->setEasingCurve(QEasingCurve::InOutCubic);[m
[32m+[m[32m    anim->setDuration(350);[m
[32m+[m[32m    anim->setStartValue(m_angle);[m
[32m+[m[32m    anim->setEndValue(angle);[m
[32m+[m[32m    anim->start();[m
[32m+[m[32m    connect(anim, &QPropertyAnimation::valueChanged, this, [=] {[m
[32m+[m[32m        this->update();[m
[32m+[m[32m    });[m
[32m+[m[32m    connect(anim, &QPropertyAnimation::finished, this, [=] {[m
[32m+[m[32m        if (onCompleteCallback) {[m
[32m+[m[32m            onCompleteCallback();[m
[32m+[m[32m        }[m
[32m+[m[32m    });[m
[32m+[m[32m    this->angleAnimation = anim;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mvoid MemoryCard::mousePressEvent(QMouseEvent *event)[m
[32m+[m[32m{[m
[32m+[m[32m    m_panel->cardClicked(this);[m
[32m+[m[32m    QWidget::mousePressEvent(event);[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mvoid MemoryCard::flip(std::function<void()>  onCompleteCallback)[m
[32m+[m[32m{[m
[32m+[m[32m    switch (m_flipState) {[m
[32m+[m[32m    case FlipState::UNFLIPPED:[m
[32m+[m[32m    case FlipState::UNFLIPPING:[m
[32m+[m[32m        m_flipState = FlipState::FLIPPING;[m
[32m+[m[32m        setAngleA(180, [=] {[m
[32m+[m[32m            m_flipState = FlipState::FLIPPED;[m
[32m+[m[32m            onCompleteCallback();[m
[32m+[m[32m        });[m
[32m+[m[32m        break;[m
[32m+[m[32m    case FlipState::FLIPPED:[m
[32m+[m[32m    case FlipState::FLIPPING:[m
[32m+[m[32m        m_flipState = FlipState::UNFLIPPING;[m
[32m+[m[32m        setAngleA(0, [=] {[m
[32m+[m[32m            m_flipState = FlipState::UNFLIPPED;[m
[32m+[m[32m            onCompleteCallback();[m
[32m+[m[32m        });[m
[32m+[m[32m        break;[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mvoid MemoryCard::paintEvent(QPaintEvent* event)[m
[32m+[m[32m{[m
[32m+[m[32m    QPainter painter(this);[m
[32m+[m
[32m+[m[32m    painter.setRenderHint(QPainter::SmoothPixmapTransform);[m
[32m+[m
[32m+[m[32m    // Calculate the center point[m
[32m+[m[32m    QPoint center(width() / 2, height() / 2);[m
[32m+[m
[32m+[m[32m    m_transform.reset();[m
[32m+[m[32m    m_transform.rotate(m_angle, Qt::YAxis);[m
[32m+[m
[32m+[m[32m    // Apply the transformation[m
[32m+[m[32m    painter.translate(center);[m
[32m+[m[32m    painter.setTransform(m_transform, true);[m
[32m+[m[32m    painter.translate(-center);[m
[32m+[m
[32m+[m[32m    // Draw the pixmap centered in the widget[m
[32m+[m[32m    QPoint topLeft((width() - m_pixmap.width()) / 2, (height() - m_pixmap.height()) / 2);[m
[32m+[m[32m    auto p = ((m_angle) <= 90.0 || (m_angle) >= 270.0) ? m_pixmap : m_backPixmap;[m
[32m+[m[32m    painter.drawPixmap(this->rect(), p);[m
[32m+[m[32m}[m
[32m+[m
[32m+[m
[1mdiff --git a/memorycard.h b/memorycard.h[m
[1mnew file mode 100644[m
[1mindex 0000000..e46cea2[m
[1m--- /dev/null[m
[1m+++ b/memorycard.h[m
[36m@@ -0,0 +1,53 @@[m
[32m+[m[32m#ifndef MEMORYCARD_H[m
[32m+[m[32m#define MEMORYCARD_H[m
[32m+[m
[32m+[m[32m#include "animatedwidget.h"[m
[32m+[m
[32m+[m[32m#include <functional>[m
[32m+[m[32m#include <QWidget>[m
[32m+[m[32m#include <QPixmap>[m
[32m+[m[32m#include <QPropertyAnimation>[m
[32m+[m
[32m+[m[32m#include "memorypanel.h"[m
[32m+[m
[32m+[m[32mclass MemoryPanel;[m
[32m+[m
[32m+[m[32menum FlipState { UNFLIPPED = 1, FLIPPING = 2,  FLIPPED = 3, UNFLIPPING = 4};[m
[32m+[m
[32m+[m[32mclass MemoryCard : public AnimatedWidget[m
[32m+[m[32m{[m
[32m+[m[32m    Q_OBJECT[m
[32m+[m[32mpublic:[m
[32m+[m[32m    Q_PROPERTY(double angle READ angle WRITE setAngle NOTIFY angleChanged)[m
[32m+[m
[32m+[m[32m    explicit MemoryCard(MemoryPanel *panel, const QString &key, const QPixmap &pixmap, const QPixmap &backPixmap, QWidget *parent = nullptr);[m
[32m+[m
[32m+[m[32m    const QString& key() const;[m
[32m+[m[32m    FlipState flipState() const;[m
[32m+[m[32m    void flip(std::function<void()> onCompleteCallback);[m
[32m+[m
[32m+[m[32m    double angle() const;[m
[32m+[m[32m    void setAngle(double angle);[m
[32m+[m[32m    void setAngleA(double angle, std::function<void()> onCompleteCallback = nullptr); // animated[m
[32m+[m
[32m+[m[32msignals:[m
[32m+[m[32m    void angleChanged(double angle);[m
[32m+[m
[32m+[m[32mprotected:[m
[32m+[m[32m    void paintEvent(QPaintEvent* event) override;[m
[32m+[m[32m    void mousePressEvent(QMouseEvent *event) override;[m
[32m+[m
[32m+[m
[32m+[m[32mprivate:[m
[32m+[m[32m    MemoryPanel *m_panel;[m
[32m+[m[32m    QString m_key;[m
[32m+[m[32m    QPixmap m_pixmap;[m
[32m+[m[32m    QPixmap m_backPixmap;[m
[32m+[m[32m    QTransform m_transform;[m
[32m+[m
[32m+[m[32m    FlipState m_flipState;[m
[32m+[m[32m    double m_angle;[m
[32m+[m[32m    QPropertyAnimation *angleAnimation;[m
[32m+[m[32m};[m
[32m+[m
[32m+[m[32m#endif // MEMORYCARD_H[m
[1mdiff --git a/memorypanel.cpp b/memorypanel.cpp[m
[1mnew file mode 100644[m
[1mindex 0000000..1288aff[m
[1m--- /dev/null[m
[1m+++ b/memorypanel.cpp[m
[36m@@ -0,0 +1,176 @@[m
[32m+[m
[32m+[m[32m#include <cmath>[m
[32m+[m[32m#include <QDebug>[m
[32m+[m[32m#include <QString>[m
[32m+[m[32m#include <QGraphicsItem>[m
[32m+[m[32m#include <QResizeEvent>[m
[32m+[m[32m#include <QDir>[m
[32m+[m
[32m+[m
[32m+[m[32m#include <QObject>[m
[32m+[m[32m#include <QNetworkAccessManager>[m
[32m+[m[32m#include <QNetworkRequest>[m
[32m+[m[32m#include <QNetworkReply>[m
[32m+[m[32m#include <QEventLoop>[m
[32m+[m[32m#include <QUrl>[m
[32m+[m[32m#include <QDebug>[m
[32m+[m[32m#include <QThread>[m
[32m+[m
[32m+[m[32m#include "downloadhandler.h"[m
[32m+[m[32m#include "util.h"[m
[32m+[m[32m#include "memorypanel.h"[m
[32m+[m[32m#include "memorycard.h"[m
[32m+[m
[32m+[m
[32m+[m[32mMemoryPanel::MemoryPanel(QWidget *parent):[m
[32m+[m[32m    m_gameState(GameState::STOPPED),[m
[32m+[m[32m    m_moveState(MoveState::SELECTED_NONE),[m
[32m+[m[32m    QWidget(parent)[m
[32m+[m[32m{[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mvoid MemoryPanel::resizeEvent(QResizeEvent *event)[m
[32m+[m[32m{[m
[32m+[m[32m    QWidget::resizeEvent(event); // base class handler[m
[32m+[m[32m    this->layoutChildren();[m
[32m+[m[32m}[m
[32m+[m
[32m+[m
[32m+[m[32mvoid MemoryPanel::setupChildren()[m
[32m+[m[32m{[m
[32m+[m[32m    auto backgroundPixmap = QPixmap("/home/sr/background.png");[m
[32m+[m
[32m+[m[32m    QThread *downloadThread = new QThread();[m
[32m+[m[32m    downloadThread->setObjectName("downloader thread");[m
[32m+[m[32m    DownloadHandler *handler = new DownloadHandler();[m
[32m+[m[32m    handler->moveToThread(downloadThread);[m
[32m+[m
[32m+[m[32m    QObject::connect(downloadThread, &QThread::started, handler, &DownloadHandler::download);[m
[32m+[m[32m    QObject::connect(handler, &DownloadHandler::completed, this, [=]() {[m
[32m+[m[32m        handler->deleteLater();[m
[32m+[m[32m        this->layoutChildren();[m
[32m+[m[32m    });[m
[32m+[m
[32m+[m[32m    QObject::connect(handler, &DownloadHandler::imageCompleted, this, [=](int i, int n, QByteArray data) {[m
[32m+[m[32m        qDebug() << "image " << i << " downloaded " << QThread::currentThread()->objectName();[m
[32m+[m[32m        Util::findStatusBar()->showMessage(QString("Retrieved Image %1 of %2").arg(i + 1).arg(n), 5000);[m
[32m+[m[32m        QPixmap pixmap;[m
[32m+[m[32m        bool success = pixmap.loadFromData(data);[m
[32m+[m[32m        if (!success) {[m
[32m+[m[32m            qDebug() << "failed to load image " << i << " into pixmap";[m
[32m+[m[32m            return;[m
[32m+[m[32m        }[m
[32m+[m[32m        int size = qMin(pixmap.width(), pixmap.height());[m
[32m+[m[32m        QRect cropRect;[m
[32m+[m[32m        if (pixmap.width() > pixmap.height()) {[m
[32m+[m[32m            int offsetX = (pixmap.width() - size) / 2;[m
[32m+[m[32m            cropRect.setRect(offsetX, 0, size, size);[m
[32m+[m[32m        } else {[m
[32m+[m[32m            int offsetY = (pixmap.height() - size) / 2;[m
[32m+[m[32m            cropRect.setRect(0, offsetY, size, size);[m
[32m+[m[32m        }[m
[32m+[m[32m        auto squaredPixmap = pixmap.copy(cropRect);[m
[32m+[m[32m        for (auto j = 0; j < 2; j++) {[m
[32m+[m[32m            QString key = QString::asprintf("key%03d", i);[m
[32m+[m[32m            auto card = new MemoryCard(this, key, squaredPixmap, backgroundPixmap, this);[m
[32m+[m[32m            card->setFixedSize(192, 192);[m
[32m+[m[32m            card->show();[m
[32m+[m[32m        }[m
[32m+[m[32m    });[m
[32m+[m[32m    QObject::connect(downloadThread, &QThread::finished, downloadThread, &QObject::deleteLater);[m
[32m+[m[32m    downloadThread->start();[m
[32m+[m[32m}[m
[32m+[m
[32m+[m
[32m+[m[32mvoid MemoryPanel::layoutChildren()[m
[32m+[m[32m{[m
[32m+[m[32m    auto aw = this->size().width();[m
[32m+[m[32m    auto ah = this->size().height();[m
[32m+[m[32m    auto padding = 0;[m
[32m+[m[32m    auto dist = 10;[m
[32m+[m[32m    //auto tw = ((aw - padding * 2) - (7 - dist)) / 8;[m
[32m+[m[32m    auto tw = 192;[m
[32m+[m[32m    auto th = 192;[m
[32m+[m
[32m+[m[32m    auto cards = std::vector<MemoryCard*>();[m
[32m+[m[32m    for(auto child : children()) {[m
[32m+[m[32m        auto card = qobject_cast<MemoryCard*>(child);[m
[32m+[m[32m        if (card) {[m
[32m+[m[32m            cards.push_back(card);[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m[32m    auto size = static_cast<int>(sqrt(cards.size()));[m
[32m+[m[32m    auto wantedw = size * tw + (size - 1) * dist;[m
[32m+[m[32m    auto wantedh = size * th + (size - 1) * dist;[m
[32m+[m[32m    auto x0 = (int) floor(.5 * (aw - wantedw));[m
[32m+[m[32m    auto y0 = (int) floor(.5 * (ah - wantedh));[m
[32m+[m[32m    qDebug() << "layoutScene(): aw=" << aw << ", ah=" << ah << ", x0" << x0 << ", size=" << cards.size();[m
[32m+[m
[32m+[m[32m    auto y = padding + y0;[m
[32m+[m[32m    for (int row = 0; row < size; row++) {[m
[32m+[m[32m        auto x = padding + x0;[m
[32m+[m[32m        for (int col = 0; col < size; col++) {[m
[32m+[m[32m            auto item = cards[row * size + col];[m
[32m+[m[32m            item->setPositionA(QPoint(x, y));[m
[32m+[m[32m            x += tw + dist;[m
[32m+[m[32m        }[m
[32m+[m[32m        y += tw + dist;[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[32m+[m
[32m+[m
[32m+[m[32mGameState MemoryPanel::gameState() const[m
[32m+[m[32m{[m
[32m+[m[32m    return m_gameState;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mvoid MemoryPanel::setGameState(GameState gameState)[m
[32m+[m[32m{[m
[32m+[m[32m    this->m_gameState = gameState;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mMoveState MemoryPanel::moveState() const[m
[32m+[m[32m{[m
[32m+[m[32m    return m_moveState;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mvoid MemoryPanel::setMoveState(MoveState moveState)[m
[32m+[m[32m{[m
[32m+[m[32m    this->m_moveState = moveState;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mvoid MemoryPanel::cardClicked(MemoryCard *card)[m
[32m+[m[32m{[m
[32m+[m[32m    switch (m_gameState) {[m
[32m+[m[32m    case STOPPED:[m
[32m+[m[32m        Util::showMessage("The Game is not started.");[m
[32m+[m[32m        break;[m
[32m+[m[32m    case OVER:[m
[32m+[m[32m        Util::showMessage("The Game is over, start a new game.");[m
[32m+[m[32m        break;[m
[32m+[m[32m    case STARTED:[m
[32m+[m[32m        switch (m_moveState) {[m
[32m+[m[32m        case SELECTED_NONE:[m
[32m+[m[32m            if (card->flipState() == FlipState::FLIPPED) {[m
[32m+[m[32m                card->flip([=]() {[m
[32m+[m[32m                    setMoveState(MoveState::SELECTED_ONE);[m
[32m+[m[32m                });[m
[32m+[m[32m            }[m
[32m+[m[32m            break;[m
[32m+[m[32m        case SELECTED_ONE:[m
[32m+[m[32m            if (card->flipState() == FlipState::FLIPPED) {[m
[32m+[m[32m                card->flip([=]() {[m
[32m+[m[32m                    setMoveState(MoveState::SELECTED_TWO);[m
[32m+[m[32m                });[m
[32m+[m[32m            }[m
[32m+[m[32m            break;[m
[32m+[m[32m        default:[m
[32m+[m[32m            break;[m
[32m+[m[32m        }[m
[32m+[m[32m        break;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m}[m
[32m+[m
[32m+[m
[32m+[m
[1mdiff --git a/memorypanel.h b/memorypanel.h[m
[1mnew file mode 100644[m
[1mindex 0000000..1cb0db2[m
[1m--- /dev/null[m
[1m+++ b/memorypanel.h[m
[36m@@ -0,0 +1,47 @@[m
[32m+[m[32m#ifndef MEMORYPANEL_H[m
[32m+[m[32m#define MEMORYPANEL_H[m
[32m+[m
[32m+[m[32m#include <QWidget>[m
[32m+[m
[32m+[m[32menum GameState {[m
[32m+[m[32m    STOPPED,[m
[32m+[m[32m    STARTED,[m
[32m+[m[32m    OVER,[m
[32m+[m[32m};[m
[32m+[m
[32m+[m[32menum MoveState {[m
[32m+[m[32m    SELECTED_NONE,[m
[32m+[m[32m    SELECTED_ONE,[m
[32m+[m[32m    SELECTED_TWO[m
[32m+[m[32m};[m
[32m+[m
[32m+[m[32mclass MemoryCard;[m
[32m+[m
[32m+[m[32mclass MemoryPanel : public QWidget[m
[32m+[m[32m{[m
[32m+[m[32m    Q_OBJECT[m
[32m+[m[32mpublic:[m
[32m+[m[32m    explicit MemoryPanel(QWidget *parent = nullptr);[m
[32m+[m
[32m+[m[32m    void setupChildren();[m
[32m+[m[32m    void layoutChildren();[m
[32m+[m
[32m+[m[32m    GameState gameState() const;[m
[32m+[m[32m    void setGameState(GameState);[m
[32m+[m[32m    MoveState moveState() const;[m
[32m+[m[32m    void setMoveState(MoveState);[m
[32m+[m
[32m+[m[32m    void cardClicked(MemoryCard *card);[m
[32m+[m
[32m+[m
[32m+[m[32mprotected:[m
[32m+[m[32m    void resizeEvent(QResizeEvent *event) override;[m
[32m+[m
[32m+[m[32mprivate:[m
[32m+[m[32m    GameState m_gameState;[m
[32m+[m[32m    MoveState m_moveState;[m
[32m+[m
[32m+[m[32msignals:[m
[32m+[m[32m};[m
[32m+[m
[32m+[m[32m#endif // MEMORYPANEL_H[m
[1mdiff --git a/util.cpp b/util.cpp[m
[1mnew file mode 100644[m
[1mindex 0000000..1ef15c7[m
[1m--- /dev/null[m
[1m+++ b/util.cpp[m
[36m@@ -0,0 +1,97 @@[m
[32m+[m[32m#include <iostream>[m
[32m+[m[32m#include <QMap>[m
[32m+[m[32m#include <QMainWindow>[m
[32m+[m[32m#include <QApplication>[m
[32m+[m[32m#include <QFile>[m
[32m+[m[32m#include <QMessageBox>[m
[32m+[m[32m#include <curl/curl.h>[m
[32m+[m[32m#include "util.h"[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32mUtil::Util() {}[m
[32m+[m
[32m+[m[32m/*[m
[32m+[m[32m * Download an url to a file synchronously[m
[32m+[m[32m *[m
[32m+[m[32m */[m
[32m+[m[32mErrorResponse Util::downloadUrl(const QString &url, const QMap<QString,QString> &headers) {[m
[32m+[m[32m    QByteArray buffer;[m
[32m+[m[32m    CURL *curl = curl_easy_init();[m
[32m+[m[32m    if (!curl) {[m
[32m+[m[32m        return {[m
[32m+[m[32m            .code = -1,[m
[32m+[m[32m                .message = "Curl not available"[m
[32m+[m[32m        };[m
[32m+[m[32m    }[m
[32m+[m[32m    struct curl_slist *header_list = NULL;[m
[32m+[m[32m    for (auto it = headers.constBegin(); it != headers.constEnd(); ++it) {[m
[32m+[m[32m        QString header = it.key() + ": " + it.value();[m
[32m+[m[32m        std::string header_std = header.toStdString();[m
[32m+[m[32m        header_list = curl_slist_append(header_list, header_std.c_str());[m
[32m+[m[32m    }[m
[32m+[m[32m    curl_easy_setopt(curl, CURLOPT_HTTPHEADER, header_list);[m
[32m+[m[32m    curl_easy_setopt(curl, CURLOPT_URL, url.toStdString().c_str());[m
[32m+[m
[32m+[m[32m    curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, +[](void *buffer, size_t size, size_t nmemb, void *userp) -> size_t {[m
[32m+[m[32m        size_t s = size * nmemb;[m
[32m+[m[32m        QByteArray* mem = static_cast<QByteArray*>(userp);[m
[32m+[m[32m        mem->append(static_cast<char*>(buffer), s);[m
[32m+[m[32m        return s;[m
[32m+[m[32m    });[m
[32m+[m
[32m+[m[32m    curl_easy_setopt(curl, CURLOPT_WRITEDATA, &buffer);[m
[32m+[m[32m    curl_easy_setopt(curl, CURLOPT_FAILONERROR, true);[m
[32m+[m
[32m+[m[32m    CURLcode res = curl_easy_perform(curl);[m
[32m+[m[32m    if (res != CURLE_OK) {[m
[32m+[m[32m        return {[m
[32m+[m[32m            .code = -1,[m
[32m+[m[32m            .message = "Failed to write data"[m
[32m+[m[32m        };[m
[32m+[m
[32m+[m[32m        std::cerr << "curl_easy_perform() failed: " << curl_easy_strerror(res) << std::endl;[m
[32m+[m[32m    }[m
[32m+[m[32m    curl_slist_free_all(header_list);[m
[32m+[m[32m    curl_easy_cleanup(curl);[m
[32m+[m[32m    return {[m
[32m+[m[32m        .code = 200,[m
[32m+[m[32m        .message = "",[m
[32m+[m[32m        .data = QByteArray(buffer),[m
[32m+[m[32m    };[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mQStatusBar* Util::findStatusBar() {[m
[32m+[m[32m    foreach (QWidget *widget, QApplication::topLevelWidgets()) {[m
[32m+[m[32m        QMainWindow *mainWin = qobject_cast<QMainWindow *>(widget);[m
[32m+[m[32m        if (mainWin) {[m
[32m+[m[32m            return mainWin->statusBar();[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m[32m    return nullptr;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m
[32m+[m[32mQByteArray Util::loadFile(const QString &path)[m
[32m+[m[32m{[m
[32m+[m[32m    QFile file(path);[m
[32m+[m[32m    if (!file.open(QIODevice::ReadOnly)) {[m
[32m+[m[32m        qDebug() << "Failed to open the file:" << file.errorString();[m
[32m+[m[32m        return QByteArray();[m
[32m+[m[32m    }[m
[32m+[m[32m    QByteArray fileData = file.readAll();[m
[32m+[m[32m    file.close();[m
[32m+[m[32m    return fileData;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mint Util::showMessage(const QString &message)[m
[32m+[m[32m{[m
[32m+[m[32m    QMessageBox messageBox;[m
[32m+[m[32m    messageBox.setWindowTitle("Message");[m
[32m+[m[32m    messageBox.setText(message);[m
[32m+[m[32m    messageBox.setIcon(QMessageBox::Information);[m
[32m+[m[32m    messageBox.setStandardButtons(QMessageBox::Ok);[m
[32m+[m[32m    messageBox.setDefaultButton(QMessageBox::Ok);[m
[32m+[m[32m    auto result = messageBox.exec();[m
[32m+[m[32m    return result;[m
[32m+[m[32m}[m
[1mdiff --git a/util.h b/util.h[m
[1mnew file mode 100644[m
[1mindex 0000000..baac6a9[m
[1m--- /dev/null[m
[1m+++ b/util.h[m
[36m@@ -0,0 +1,28 @@[m
[32m+[m[32m#ifndef UTIL_H[m
[32m+[m[32m#define UTIL_H[m
[32m+[m
[32m+[m[32m#include <QStatusBar>[m
[32m+[m[32m#include <QString>[m
[32m+[m
[32m+[m[32mstruct ErrorResponse {[m
[32m+[m[32m    int code;[m
[32m+[m[32m    QString message;[m
[32m+[m[32m    QByteArray data;[m
[32m+[m[32m};[m
[32m+[m
[32m+[m[32mclass Util[m
[32m+[m[32m{[m
[32m+[m[32mprivate:[m
[32m+[m[32m    Util();[m
[32m+[m
[32m+[m[32mpublic:[m
[32m+[m[32m    static ErrorResponse downloadUrl(const QString &url, const QMap<QString,QString> &headers);[m
[32m+[m
[32m+[m[32m    static QStatusBar* findStatusBar();[m
[32m+[m
[32m+[m[32m    static QByteArray loadFile(const QString &path);[m
[32m+[m
[32m+[m[32m    static int showMessage(const QString &message);[m
[32m+[m[32m};[m
[32m+[m
[32m+[m[32m#endif // UTIL_H[m
